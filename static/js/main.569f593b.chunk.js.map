{"version":3,"sources":["App.module.css","serviceWorker.js","tags/tags.js","redux/app-reducer.js","redux/redux-store.js","components/Hashtags.jsx","caret/caret.js","components/HashtagsContainer.jsx","App.js","index.js","components/Hashtags.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","tags","initialState","text","matchTagsCreator","textTag","type","appReducer","state","action","matchedTags","filter","tag","toLowerCase","indexOf","newText","reducers","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","Hashtags","props","selectTag","e","putSelectedTag","target","textContent","onKeyUp","which","innerText","trim","length","sanitizeText","html","disabled","onChange","onTextType","value","onBlur","className","s","content","tagName","id","list","map","key","item","onClick","getCaretPosition","getSelection","getRangeAt","range","selectedObj","rangeCount","childNodes","anchorNode","parentNode","i","outerHTML","nodeType","startOffset","HashtagsContainer","plainText","document","getElementById","caretPosition","lastHashIndex","substring","lastIndexOf","latsWord","detectTags","lastWord","textChange","lastWordIndex","firstChunk","focus","sanitizeConf","allowedTags","allowedAttributes","a","sanitizeHtml","this","React","Component","connect","dispatch","textChangeCreator","App","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.569f593b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"App-link\":\"App_App-link__3FsH9\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const tags = [\n    '#liver',\n    '#pain',\n    '#right',\n    '#left',\n    '#pancreas',\n    '#kidney',\n    '#brain',\n    '#severe_pain',\n    '#tumour',\n    '#cancer',\n    '#MRI',\n    '#CT',\n    '#male',\n    '#female',\n    '#bone',\n    '#shoulder',\n    '#hip',\n    '#XRAY',\n    '#knee',\n    '#spine',\n    '#head',\n    '#abdomen',\n    '#contrast',\n    '#fragment',\n    '#detached',\n    '#injury',\n    '#torn',\n    '#rotator',\n    '#cuff',\n    '#abdominal',\n    '#dilatation'\n]","import {tags} from \"../tags/tags\";\n\nconst MATCH_TAGS = 'MATCH_TAGS'\nconst TEXT_CHANGE = 'TEXT_CHANGE'\n\nlet initialState = {\n    tags : [],\n    text : ''\n}\n\nconst appReducer = (state = initialState, action) => {\n    switch(action.type) {\n\n        case MATCH_TAGS :{\n            let matchedTags = []\n            if (action.textTag !== null) {\n                matchedTags = tags.filter((tag) => {\n                    return tag.toLowerCase().indexOf(action.textTag.toLowerCase()) === 0\n                })\n            }\n            return {...state, tags: matchedTags}\n        }\n\n        case TEXT_CHANGE : {\n            return {...state, text: action.newText}\n        }\n\n        default : {\n            return state\n        }\n    }\n}\n\nconst matchTagsCreator = (textTag) => ({type : MATCH_TAGS, textTag})\nconst textChangeCreator = (newText) => ({type : TEXT_CHANGE, newText})\n\nexport const detectTags = (text = null) => (dispatch) => {\n        dispatch(matchTagsCreator(text))\n}\n\nexport const textChange = (newText) => (dispatch) => {\n    dispatch(textChangeCreator(newText))\n}\n\nexport default appReducer","import {combineReducers, createStore} from \"redux\"\nimport { applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport appReducer from \"./app-reducer\";\n\nlet reducers = combineReducers({\n    app : appReducer\n});\n\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nwindow.store = store;\n\nexport default store;","import React from \"react\";\nimport ContentEditable from \"react-contenteditable\";\nimport s from './Hashtags.module.css'\n\nconst Hashtags = (props) => {\n\n    const onTextType = (e) => {\n        props.onTextType(e.target.value)\n    }\n    const putSelectedTag = (tag) => {\n        props.putSelectedTag(tag)\n    }\n\n    const sanitizeText = () => {\n        props.sanitizeText()\n    }\n\n    const onKeyUp = (e) => {\n        if (e.which === 8 && e.target.innerText.trim().length === 0) {\n            props.sanitizeText();\n        }\n    }\n\n    const selectTag = (e) => {\n        props.putSelectedTag(e.target.textContent)\n    }\n\n    return (\n        <div>\n            <div>\n                <ContentEditable\n                    onKeyUp={onKeyUp}\n                    html={props.text}\n                    disabled={false}\n                    onChange={onTextType}\n                    onBlur={sanitizeText}\n                    className={s.content}\n                    tagName={'div'}\n                    id={'post'}\n                />\n\n            </div>\n            {\n                props.tags.length > 0 &&\n                <ul className={s.list}>\n                    {\n                        props.tags.map(tag => <li key={tag} className={s.item} onClick={selectTag}>{tag}</li>)\n                    }\n                </ul>\n            }\n\n        </div>\n    )\n}\n\nexport default Hashtags","/*\nstyle=\"-webkit-user-select:text;\" is needed for iPad\n\n*/\nfunction getCaretCharacterOffsetWithin(element) {\n    var caretOffset = 0;\n    var doc = element.ownerDocument || element.document;\n    var win = doc.defaultView || doc.parentWindow;\n    var sel;\n    if (typeof win.getSelection != \"undefined\") {\n        sel = win.getSelection();\n        if (sel.rangeCount > 0) {\n            var range = win.getSelection().getRangeAt(0);\n            var preCaretRange = range.cloneRange();\n            preCaretRange.selectNodeContents(element);\n            preCaretRange.setEnd(range.endContainer, range.endOffset);\n            caretOffset = preCaretRange.toString().length;\n        }\n    } else if ((sel = doc.selection) && sel.type != \"Control\") {\n        var textRange = sel.createRange();\n        var preCaretTextRange = doc.body.createTextRange();\n        preCaretTextRange.moveToElementText(element);\n        preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\n        caretOffset = preCaretTextRange.text.length;\n    }\n    return caretOffset;\n}\n\nexport function getCaretPosition() {\n    if (window.getSelection && window.getSelection().getRangeAt) {\n        var range = window.getSelection().getRangeAt(0);\n        var selectedObj = window.getSelection();\n        var rangeCount = 0;\n        var childNodes = selectedObj.anchorNode.parentNode.childNodes;\n        for (var i = 0; i < childNodes.length; i++) {\n            if (childNodes[i] == selectedObj.anchorNode) {\n                break;\n            }\n            if (childNodes[i].outerHTML)\n                rangeCount += childNodes[i].outerHTML.length;\n            else if (childNodes[i].nodeType == 3) {\n                rangeCount += childNodes[i].textContent.length;\n            }\n        }\n        return range.startOffset + rangeCount;\n    }\n    return -1;\n}\n\nfunction showCaretPos() {\n    var el = document.getElementById(\"test\");\n    var caretPosEl = document.getElementById(\"caretPos\");\n    caretPosEl.innerHTML = \"Caret position: \" + getCaretPosition(); //getCaretCharacterOffsetWithin(el);\n}","import React from 'react';\nimport { connect} from 'react-redux'\nimport Hashtags from \"../components/Hashtags\";\nimport {detectTags, textChange} from \"../redux/app-reducer\";\nimport sanitizeHtml from 'sanitize-html'\nimport {getCaretPosition} from \"../caret/caret\";\n\nclass HashtagsContainer extends React.Component {\n\n    onTextType = (text) => {\n        const plainText = document.getElementById('post').innerText\n        let caretPosition = getCaretPosition();\n        let substring = plainText.substring(0, caretPosition)\n        let lastHashIndex = substring.lastIndexOf('#')\n        let latsWord = plainText.substring(lastHashIndex, caretPosition)\n        if (latsWord.length > 0) this.props.detectTags(latsWord)\n\n        this.lastWord = latsWord\n        this.props.textChange(text)\n    }\n\n    putSelectedTag = (tag) => {\n        let lastWordIndex = this.props.text.lastIndexOf(this.lastWord)\n        let firstChunk = this.props.text.substring(0, lastWordIndex)\n        let newText = firstChunk + '<strong>' + tag + '</strong>' + '&nbsp;'\n\n        this.props.textChange(newText)\n        this.props.detectTags(null)\n        document.getElementById('post').focus()\n    }\n\n    sanitizeConf = {\n        allowedTags: [\"b\", \"i\", \"em\", \"strong\", \"a\", \"p\", \"h1\"],\n        allowedAttributes: { a: [\"href\"] }\n    };\n\n    sanitizeText = () => {\n        this.props.textChange(sanitizeHtml(this.props.text, this.sanitizeConf))\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Enter text:</p>\n                <Hashtags\n                    tags={this.props.tags}\n                    text={this.props.text}\n                    onTextType={this.onTextType}\n                    putSelectedTag={this.putSelectedTag}\n                    sanitizeText={this.sanitizeText}\n                />\n            </div>\n        )\n    }\n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tags: state.app.tags,\n        text : state.app.text\n    }\n}\n\nexport default connect(mapStateToProps,{detectTags, textChange})(HashtagsContainer);\n","import React from 'react';\nimport HashtagsContainer from \"./components/HashtagsContainer\";\nimport s from './App.module.css'\n\nconst App = () => {\n    return <div className={s.App}>\n        <HashtagsContainer />\n    </div>\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n      <Provider store={store}>\n            <App />\n      </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Hashtags_list__2pbvd\",\"item\":\"Hashtags_item__19piv\",\"content\":\"Hashtags_content__37qww\"};"],"sourceRoot":""}